within ClaRa.Examples;
model TestError
    outer ClaRa.SimCenter simCenter;
 inner parameter TILMedia.GasTypes.BaseGas               medium = simCenter.flueGasModel
    "Medium to be used"  annotation(choicesAllMatching, Dialog(group="Fundamental Definitions"));
parameter Integer N_cv=10;
//   model Fluid
//     Real drhodp_hxi=time+1;
//     Real drhodh_pxi=time+1;
//     Real drhodxi_ph[medium.nc-1]=(time+1)*ones(medium.nc-1);
//     Real xi[medium.nc-1]=(time+1)*ones(medium.nc-1);
//   end Fluid;
Real xi[N_cv,medium.nc - 1];
Real xi_start[medium.nc - 1]={0,0,0.0005,0,0.7581,0.2314,0,0,0.01};

    inner TILMedia.Gas_ph       fluid[N_cv](p=p, h=h, xi=xi, each gasType=medium,
    each computeTransportProperties=true)                                                      annotation (Placement(transformation(extent={{-10,-40},
            {10,-20}},                                                                                                   rotation=0)));

  //Fluid fluid[10];
  Real drhodt[N_cv];
  Real p[N_cv]=(time+100)*ones(N_cv);
  Real h[N_cv]=(time+100)*ones(N_cv);
equation

  for i in 1:N_cv loop
      xi[i,:]=xi_start[1:end];
//fluid[i].drhodp_hxi*der(p[i])=(drhodt[i]-der(h[i])*fluid[i].drhodh_pxi - sum({fluid[i].drhodxi_ph[j]
         // * der(fluid[i].xi[j]) for j in 1:medium.nc-1}));
          fluid[i].drhodp_hxi*der(p[i])=(drhodt[i]-der(h[i])*fluid[i].drhodh_pxi - sum({fluid[i].drhodxi_ph[j] * der(fluid[i].xi[j]) for j in 1:medium.nc-1}));
  end for;

  annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={Ellipse(
          extent={{-88,64},{36,-78}},
          lineColor={28,108,200},
          fillPattern=FillPattern.Solid,
          fillColor={0,0,255})}));
end TestError;
